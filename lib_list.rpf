{*******************************************************************************
*
* lib_list.rpf
*
* Functional 1-dimensional list class modeled after the built-in JavaScript
* Array object. Uses 1-based list indexes to be consistent with VGL arrays.
*
* Ian Cooper
* 05 December 2018
*
*******************************************************************************}

ENABLE WINDOWS
SET NAME "DEFER/"

JOIN STANDARD_LIBRARY STD_ARRAY

GLOBAL CONSTANT LIST_CLASS = "LIST"

{ run tests }
lib_list_test_list_class ( )
FLUSHLITERAL

{******************************************************************************}
GLOBAL ROUTINE lib_list_test_list_class

    DECLARE list, i, j, arr

    print_header ( )

    { create object -----------------------------------------------------------}
    print_results_section ( "create object" )
    lib_list_define_list_class ( )
    CREATE OBJECT LIST_CLASS, list
    print_results ( "( list != EMPTY )", ( list != EMPTY ), TRUE )

    { class initialisation ----------------------------------------------------}
    print_results_section ( "class initialisation" )
    CREATE OBJECT LIST_CLASS, list
    print_results ( "list . length",
                    list . length, 0 )
    print_results ( "size_of_array ( list . data )",
                     size_of_array ( list . data ), 0 )
                    
    { append ------------------------------------------------------------------}
    print_results_section ( "append" )
    CREATE OBJECT LIST_CLASS, list
    print_results ( "list", list . toString ( ), "[]" )
    print_results ( "list . append ( 'x' )",
                     list . append ( "x" ) . toString ( ),
                    "[x]" )
    print_results ( "list . append ( 'y' ) . append ( 'z' )",
                     list . append ( "y" ) . append ( "z" ) . toString ( ),
                    "[x,y,z]" )

    { append_array ------------------------------------------------------------}
    print_results_section ( "append_array" )
    CREATE OBJECT LIST_CLASS, list
    ARRAY arr ARRAYSIZE ( 0, 2 )
    arr [ 1, 1 ] = "x"
    arr [ 1, 2 ] = "a"
    arr [ 2, 1 ] = "y"
    arr [ 2, 2 ] = "b"
    arr [ 3, 1 ] = "z"
    arr [ 3, 2 ] = "c"
    print_results ( "list", list . toString ( ), "[]" )
    print_results ( "list . append_array ( arr, 1 )",
                     list . append_array ( arr, 1 ) . toString ( ),
                    "[x,y,z]" )
    print_results ( "list . append_array ( arr, 2 )",
                     list . append_array ( arr, 2 ) . toString ( ),
                    "[x,y,z,a,b,c]" )

    { append_split ------------------------------------------------------------}
    print_results_section ( "append_split" )
    CREATE OBJECT LIST_CLASS, list
    print_results ( "list", list . toString ( ), "[]" )
    print_results ( "list . append_split ( 'a,b,c', ',' )",
                     list . append_split ( "a,b,c", "," ) . toString ( ),
                    "[a,b,c]" )
    print_results ( "list . append_split ( 'xa!#yb!#zc', '!#' )",
                     list . append_split ( "xa!#yb!#zc", "!#" ) . toString ( ),
                    "[a,b,c,xa,yb,zc]" )
    print_results ( "list . clear ( )", list . clear ( ) . toString ( ), "[]" )
    print_results ( "list . append_split ( 'abc', EMPTY )",
                     list . append_split ( "abc", EMPTY ) . toString ( ),
                    "[a,b,c]" )
    print_results ( "list . append_split ( 'xyz', '' )",
                     list . append_split ( "xyz", "" ) . toString ( ),
                    "[a,b,c,x,y,z]" )
    print_results ( "list . clear ( )", list . clear ( ) . toString ( ), "[]" )
    print_results ( "list . append_split ( EMPTY, ',' )",
                     list . append_split ( EMPTY, "," ) . toString ( ),
                    "[]" )
    print_results ( "list . append_split ( '', ',' )",
                     list . append_split ( "", "," ) . toString ( ),
                    "[]" )

    { clear -------------------------------------------------------------------}
    print_results_section ( "clear" )
    CREATE OBJECT LIST_CLASS, list
    list . append ( "x" ) . append ( "y" ) . append ( "z" )
    print_results ( "list", list . toString ( ), "[x,y,z]" )
    print_results ( "list . clear ( ) . length", list . clear ( ) . length, 0 )
    print_results ( "list", list . toString ( ), "[]" )

    { concat ------------------------------------------------------------------}
    print_results_section ( "concat" )
    CREATE OBJECT LIST_CLASS, i
    CREATE OBJECT LIST_CLASS, j
    i . append ( "a" ) . append ( "b" )
    j . append ( "x" ) . append ( "y" )
    print_results ( "i", i . toString ( ), "[a,b]" )
    print_results ( "j", j . toString ( ), "[x,y]" )
    print_results ( "i . concat ( j )",
                     i . concat ( j ) . toString ( ), "[a,b,x,y]" )

    { copy --------------------------------------------------------------------}
    print_results_section ( "copy" )
    CREATE OBJECT LIST_CLASS, list
    list . append ( "x" ) . append ( "y" )
    print_results ( "list", list . toString ( ), "[x,y]" )
    i = list . copy ( )
    print_results ( "i = list . copy ( ); i",
                     i . toString ( ), "[x,y]" )
    i . pop ( )
    print_results ( "i . pop ( ); i",
                     i . toString ( ), "[x]" )
    print_results ( "list", list . toString ( ), "[x,y]" )

    { get ---------------------------------------------------------------------}
    print_results_section ( "get" )
    CREATE OBJECT LIST_CLASS, list
    list . append ( "a" ) . append ( "b" )
    print_results ( "list", list . toString ( ), "[a,b]" )
    print_results ( "list . get ( 0 )", list . get ( 0 ), EMPTY )
    print_results ( "list . get ( 1 )", list . get ( 1 ), "a" )
    print_results ( "list . get ( 2 )", list . get ( 2 ), "b" )
    print_results ( "list . get ( 3 )", list . get ( 3 ), EMPTY )

    { inBounds ---------------------------------------------------------------}
    print_results_section ( "inBounds" )
    CREATE OBJECT LIST_CLASS, list
    list . append ( "a" ) . append ( "b" )
    print_results ( "list", list . toString ( ), "[a,b]" )
    print_results ( "list . inBounds ( 0 )", list . inBounds ( 0 ), FALSE )
    print_results ( "list . inBounds ( 1 )", list . inBounds ( 1 ), TRUE )
    print_results ( "list . inBounds ( 2 )", list . inBounds ( 2 ), TRUE )
    print_results ( "list . inBounds ( 3 )", list . inBounds ( 3 ), FALSE )
    print_results ( "list . inBounds ( EMPTY )",
                     list . inBounds ( EMPTY ), FALSE )
    print_results ( "list . inBounds ( 'xyz' )",
                     list . inBounds ( "xyz" ), FALSE )

    { includes ----------------------------------------------------------------}
    print_results_section ( "includes" )
    CREATE OBJECT LIST_CLASS, list
    list . append ( "a" ) . append ( "b" )
    print_results ( "list", list . toString ( ), "[a,b]" )
    print_results ( "list . includes ( 'a' )", list . includes ( "a" ), TRUE )
    print_results ( "list . includes ( 'b' )", list . includes ( "b" ), TRUE )
    print_results ( "list . includes ( 'x' )", list . includes ( "x" ), FALSE )
    print_results ( "list . includes ( EMPTY )",
                     list . includes ( EMPTY ), FALSE )
    print_results ( "list . append ( EMPTY ) . includes ( EMPTY )",
                     list . append ( EMPTY ) . includes ( EMPTY ), TRUE )

    { indexOf -----------------------------------------------------------------}
    print_results_section ( "indexOf" )
    CREATE OBJECT LIST_CLASS, list
    list . append ( "a" ) . append ( "b" ) . append ( "a" )
    print_results ( "list", list . toString ( ), "[a,b,a]" )
    print_results ( "list . indexOf ( 'a' )", list . indexOf ( "a" ), 1 )
    print_results ( "list . indexOf ( 'b' )", list . indexOf ( "b" ), 2 )
    print_results ( "list . indexOf ( 'x' )", list . indexOf ( "x" ), 0 )
    print_results ( "list . indexOf ( EMPTY )", list . indexOf ( EMPTY ), 0 )
    print_results ( "list . append ( EMPTY ) . indexOf ( EMPTY )",
                     list . append ( EMPTY ) . indexOf ( EMPTY ), 4 )
    
    { join --------------------------------------------------------------------}
    print_results_section ( "join" )
    CREATE OBJECT LIST_CLASS, list
    list . append ( "a" ) . append ( "b" ) . append ( "c" )
    print_results ( "list", list . toString ( ), "[a,b,c]" )
    print_results ( "list . join ( ', ' )", list . join ( ", " ), "a, b, c" )
    print_results ( "list . join ( '' )", list . join ( "" ), "abc" )
    print_results ( "list . join ( EMPTY )", list . join ( EMPTY ), "abc" )

    { lastIndexOf -------------------------------------------------------------}
    print_results_section ( "lastIndexOf" )
    CREATE OBJECT LIST_CLASS, list
    list . append ( "a" ) . append ( "b" ) . append ( "a" )
    print_results ( "list", list . toString ( ), "[a,b,a]" )
    print_results ( "list . lastIndexOf ( 'a' )",
                     list . lastIndexOf ( "a" ), 3 )
    print_results ( "list . lastIndexOf ( 'b' )",
                     list . lastIndexOf ( "b" ), 2 )
    print_results ( "list . lastIndexOf ( 'x' )",
                     list . lastIndexOf ( "x" ), 0 )
    print_results ( "list . lastIndexOf ( EMPTY )",
                     list . lastIndexOf ( EMPTY ), 0 )
    print_results ( "list . append ( EMPTY ) . lastIndexOf ( EMPTY )",
                     list . append ( EMPTY ) . lastIndexOf ( EMPTY ), 4 )
    
    { pop ---------------------------------------------------------------------}
    print_results_section ( "pop" )
    CREATE OBJECT LIST_CLASS, list
    list . append ( "a" ) . append ( "b" ) . append ( "c" )
    print_results ( "list", list . toString ( ), "[a,b,c]" )
    print_results ( "list . pop ( )", list . pop ( ), "c" )
    print_results ( "list . pop ( )", list . pop ( ), "b" )
    print_results ( "list", list . toString ( ), "[a]" )
    print_results ( "list . clear ( ) . pop ( )",
                     list . clear ( ) . pop ( ), EMPTY )

    { push --------------------------------------------------------------------}
    print_results_section ( "push" )
    CREATE OBJECT LIST_CLASS, list
    print_results ( "list", list . toString ( ), "[]" )
    print_results ( "list . push ( 'x' )",
                     list . push ( "x" ) . toString ( ),
                    "[x]" )
    print_results ( "list . push ( 'y' ) . push ( 'z' ) .toString ( )",
                     list . push ( "y" ) . push ( "z" ) .toString ( ),
                    "[x,y,z]" )

    { reverse -----------------------------------------------------------------}
    print_results_section ( "reverse" )
    CREATE OBJECT LIST_CLASS, list
    list . append ( "a" ) . append ( "b" ) . append ( "c" ) . append ( "d" )
    print_results ( "list", list . toString ( ), "[a,b,c,d]" )
    print_results ( "list . reverse ( )",
                     list . reverse ( ) . toString ( ), "[d,c,b,a]" )
    print_results ( "list . append ( 'x' )",
                     list . append ( "x" ) . toString ( ), "[d,c,b,a,x]" )
    print_results ( "list . reverse ( )",
                     list . reverse ( ) . toString ( ), "[x,a,b,c,d]" )

    { set ---------------------------------------------------------------------}
    print_results_section ( "set" )
    CREATE OBJECT LIST_CLASS, list
    list . append ( "a" ) . append ( "b" )
    print_results ( "list", list . toString ( ), "[a,b]" )
    print_results ( "list . set ( 1, 'x' )",
                     list . set ( 1, "x" ) . toString ( ), "[x,b]" )
    print_results ( "list . set ( 2, 'y' )",
                     list . set ( 2, "y" ) . toString ( ), "[x,y]" )
    print_results ( "list . set ( EMPTY, 'z' )",
                     list . set ( EMPTY, "z" ) . toString ( ), "[x,y,z]" )
    print_results ( "list . set ( 0, 'foo' )", list . set ( 0, "foo" ), EMPTY )
    print_results ( "list . set ( 4, 'foo' )", list . set ( 4, "foo" ), EMPTY )

    { slice -------------------------------------------------------------------}
    print_results_section ( "slice" )
    CREATE OBJECT LIST_CLASS, list
    list . append ( "1" ) . append ( "2" ) . append ( "3" ) . append ( "4" )
         . append ( "5" ) . append ( "6" ) . append ( "7" ) . append ( "8" )
    print_results ( "list",
                     list . toString ( ), "[1,2,3,4,5,6,7,8]" )
    print_results ( "list . slice ( 2, 4 )",
                     list . slice ( 2, 4 ) . toString ( ), "[2,3]" )
    print_results ( "list . slice ( 4, 2 )",
                     list . slice ( 4, 2 ) . toString ( ), "[]" )
    print_results ( "list . slice ( -3, EMPTY )",
                     list . slice ( -3, EMPTY ) . toString ( ), "[6,7,8]" )
    print_results ( "list . slice ( EMPTY, EMPTY )",
                     list . slice ( EMPTY, EMPTY ) . toString ( ),
                    "[1,2,3,4,5,6,7,8]" )
    print_results ( "list . slice ( EMPTY, -3 )",
                     list . slice ( EMPTY, -3 ) . toString ( ),
                    "[1,2,3,4,5]" )

    { splice ------------------------------------------------------------------}
    print_results_section ( "splice" )
    CREATE OBJECT LIST_CLASS, list
    list . append ( "1" ) . append ( "2" ) . append ( "3" ) . append ( "4" )
         . append ( "5" ) . append ( "6" ) . append ( "7" ) . append ( "8" )
    print_results ( "list",
                     list . toString ( ), "[1,2,3,4,5,6,7,8]" )
    print_results ( "list . copy ( ) . splice ( 3, 2 )",
                     list . copy ( ) . splice ( 3, 2 ) . toString ( ), "[3,4]" )
    print_results ( "list . copy ( ) . splice ( 5, 100 )",
                     list . copy ( ) . splice ( 5, 100 ) . toString ( ),
                    "[5,6,7,8]" )
    print_results ( "list . splice ( -5, 4 )",
                     list . splice ( -5, 4 ) . toString ( ),
                    "[4,5,6,7]" )
    print_results ( "list", list . toString ( ), "[1,2,3,8]" )

    { toString ----------------------------------------------------------------}
    print_results_section ( "toString" )
    CREATE OBJECT LIST_CLASS, list
    list . append ( "1" ) . append ( "2" ) . append ( "3" )
    print_results ( "list", list . toString ( ), "[1,2,3]" )
    print_results ( "list . clear ( ) . append ( '1' )",
                     list . clear ( ) . append ( "1" ) . toString ( ), "[1]" )
    print_results ( "list . clear ( )",
                     list . clear ( ) . toString ( ), "[]" )

    { unshift -----------------------------------------------------------------}
    print_results_section ( "unshift" )
    CREATE OBJECT LIST_CLASS, list
    list . append ( "a" ) . append ( "b" ) . append ( "c" )
    print_results ( "list", list . toString ( ), "[a,b,c]" )
    print_results ( "list . unshift ( )", list . unshift ( ), "a" )
    print_results ( "list . unshift ( )", list . unshift ( ), "b" )
    print_results ( "list", list . toString ( ), "[c]" )
    print_results ( "list . clear ( ) . unshift ( )",
                     list . clear ( ) . unshift ( ), EMPTY )

ENDROUTINE

{******************************************************************************}
ROUTINE print_header

    SET NAME "DISPLAY/"
    SET WIDTH 150
    SET LENGTH 999999
    
LITERAL
## Test Report

| Function                     | Result     | Details                                                                                                |
|------------------------------|------------|--------------------------------------------------------------------------------------------------------|
$ENDLITERAL

ENDROUTINE

{******************************************************************************}
ROUTINE print_results_section ( VALUE title )

LITERAL
| $title______________________ |            |                                                                                                        |
$ENDLITERAL

ENDROUTINE

{******************************************************************************}
ROUTINE print_results ( VALUE function, VALUE expr, VALUE expected )

    DECLARE line, passed

    IF expr != EMPTY THEN
        line = "`" : STRIP ( function ) : " = " : STRIP ( expr ) : "`"
    ELSE
        line = "`" : STRIP ( function ) : " = EMPTY`"
    ENDIF
    
    IF expr = expected THEN 
        passed = "_OK_"
    ELSE
        passed = "**FAILED**"
        line = line : "; expected `" : STRIP ( expected ) : "`"
    ENDIF

LITERAL
|                              | $passed___ | $line_________________________________________________________________________________________________ |
$ENDLITERAL

ENDROUTINE

{******************************************************************************}
ROUTINE print_footer

LITERAL

_End of test report._
$ENDLITERAL

ENDROUTINE

{******************************************************************************}
GLOBAL ROUTINE lib_list_define_list_class

    DEFINE CLASS LIST_CLASS
        INITIALISATION
        PROPERTIES
            "data",    { for read-only purposes }
            "length"   { for read-only purposes }
        ACTIONS        { * indicates that it's covered by the test suite }
        {*} "append",
        {*} "append_array",
        {*} "append_split",
        {*} "clear",
        {*} "concat",
        {*} "copy",
        {*} "get",
        {*} "inBounds",
        {*} "includes",
        {*} "indexOf",
        {*} "join",
        {*} "lastIndexOf",
        {*} "pop",
        {*} "push",
        {*} "reverse",
        {*} "set",
        {*} "shift",
        {*} "slice",
        {*} "splice",
        {*} "toString",
        {*} "unshift"
    END CLASS

ENDROUTINE

{******************************************************************************}
ROUTINE list_class_initialisation ( self )
    self . clear ( )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_append ( self, VALUE val )
    self . data [ self . length + 1 ] = val
    self . length = self . length + 1
    RETURN ( self )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_append_array ( self, arr, VALUE dim )
    DECLARE i, arr_size
    i = 1
    arr_size = size_of_array ( arr )

    WHILE i <= arr_size DO
        IF dim = EMPTY THEN
            self . append ( arr [ i ] )
        ELSE
            self . append ( arr [ i, dim ] )
        ENDIF
        i = i + 1
    ENDWHILE

    RETURN ( self )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_append_split ( self, VALUE str, VALUE delim )

    DECLARE tok_start, str_len, delim_len, i

    IF str != EMPTY THEN
        IF delim = EMPTY THEN
            delim = ""
        ENDIF

        tok_start = 1
        str_len = LENGTH ( str )
        delim_len = LENGTH ( delim )
        i = tok_start

        WHILE i <= str_len DO
            IF delim_len = 0 THEN
                self . append ( SUBSTRING ( str, i, 1 ) )
                i = i + 1
            ELSEIF SUBSTRING ( str, i, delim_len ) = delim THEN
                self . append ( SUBSTRING ( str, tok_start, i - tok_start ) )
                i = i + delim_len
                tok_start = i
            ELSE
                i = i + 1
            ENDIF
        ENDWHILE

        IF str_len > 0 THEN
            IF delim_len > 0 THEN
                self . append ( SUBSTRING ( str, tok_start, i - tok_start ) )
            ENDIF
        ENDIF
    ENDIF

    RETURN ( self )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_clear ( self )
    ARRAY self . data
    self . length = 0
    RETURN ( self )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_concat ( self, list )
    DECLARE result
    CREATE OBJECT LIST_CLASS, result
    RETURN ( result . append_array ( self . data, EMPTY )
                    . append_array ( list . data, EMPTY ) )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_copy ( self )
    RETURN ( self . slice ( EMPTY, EMPTY ) )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_get ( self, VALUE i )
    DECLARE result
    result = EMPTY

    IF self.inBounds ( i ) THEN
        result = self . data [ i ]
    ENDIF

    RETURN ( result )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_inBounds ( self, VALUE i )
    RETURN ( ( i != EMPTY ) AND ( i >= 1 ) AND ( i <= self . length ) )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_includes ( self, VALUE val )
    RETURN ( self . indexOf ( val ) > 0 )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_indexOf ( self, VALUE val )
    DECLARE i
    i = 1

    WHILE i <= self . length DO
        IF self . get ( i ) = val THEN
            RETURN ( i )
        ENDIF
        i = i + 1
    ENDWHILE

    RETURN ( 0 )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_join ( self, VALUE delim )
    DECLARE result, i

    IF delim = EMPTY THEN
        result = self . join ( "" )
    ELSE
        result = ""
        i = 1
        WHILE i <= self . length DO
            result = result : self . get ( i )
            IF i < self . length THEN
                result = result : delim
            ENDIF
            i = i + 1
        ENDWHILE
    ENDIF
    
    RETURN ( result )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_lastIndexOf ( self, VALUE val )
    DECLARE i
    i = self . length

    WHILE i >= 1 DO
        IF self . get ( i ) = val THEN
            RETURN ( i )
        ENDIF
        i = i - 1
    ENDWHILE

    RETURN ( 0 )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_pop ( self )
    DECLARE result

    IF self . length = 0 THEN
        result = EMPTY
    ELSE
        result = self . get ( self . length )
        array_remove_slice ( self . data, 1, self . length )
        self . length = self . length - 1
    ENDIF

    RETURN ( result )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_push ( self, VALUE val )
    RETURN ( self . append ( val ) )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_reverse ( self )

    DECLARE middle, i, temp

    middle = TRUNC ( self . length / 2 )
    i = 1
    WHILE i <= middle DO
        temp = self . get ( i )
        self . set ( i, self . get ( self . length - ( i - 1 ) ) )
        self . set ( self . length - ( i - 1 ), temp )
        i = i + 1
    ENDWHILE

    RETURN ( self )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_set ( self, VALUE i, VALUE val )
    DECLARE result
    result = self

    IF self . inBounds ( i ) THEN
        self . data [ i ] = val
    ELSEIF i = EMPTY THEN
        self . append ( val )
    ELSE
        result = EMPTY
    ENDIF

    RETURN ( result )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_shift ( self )
    DECLARE result
    result = self . get ( 1 )
    array_remove_slice ( self . data, 1, 1 )
    self . length = self . length - 1
    RETURN ( result )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_slice ( self, VALUE n, VALUE m )
    DECLARE result, i

    { check n }
    IF n = EMPTY THEN
        n = 1
    ELSEIF n < 1 THEN
        n = self . length + n + 1
        IF n < 1 THEN
            n = 1
        ENDIF
    ENDIF

    { check m }
    IF m = EMPTY THEN
        m = self . length + 1
    ELSEIF m < 1 THEN
        m = self . length + m + 1
        IF m < 1 THEN
            m = 1
        ENDIF
    ENDIF

    CREATE OBJECT LIST_CLASS, result
    i = n

    WHILE self . inBounds ( i ) AND ( i < m ) DO
        result . append ( self . get ( i ) )
        i = i + 1
    ENDWHILE

    RETURN ( result )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_splice ( self, VALUE n, VALUE m )
    DECLARE result, i

    { check n }
    IF n > self . length THEN
        n = self . length
    ELSEIF n < 1 THEN
        n = self . length + n + 1
        IF n < 1 THEN
            n = 1
        ENDIF
    ENDIF

    { check m }
    IF m > self . length - n + 1 THEN
        m = self . length - n + 1
    ELSEIF m < 0 THEN
        m = 0
    ENDIF

    CREATE OBJECT LIST_CLASS, result
    i = n

    WHILE self . inBounds ( n ) AND ( i < m + n ) DO
        result . append ( self . get ( n ) )
        array_remove_slice ( self . data, 1, n )
        self . length = self . length - 1
        i = i + 1
    ENDWHILE

    RETURN ( result )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_toString ( self )
    DECLARE result

    IF ( self . length = 0 ) THEN
        result = "[]"
    ELSE
        result = "[" : self . join ( "," ) : "]"
    ENDIF

    RETURN ( result )
ENDROUTINE

{******************************************************************************}
ROUTINE list_action_unshift ( self )
    DECLARE result
    
    IF self . length = 0 THEN
        result = EMPTY
    ELSE
        result = self . get ( 1 )
        array_remove_slice ( self . data, 1, 1 )
        self . length = self . length - 1
    ENDIF

    RETURN ( result )
ENDROUTINE

{******************************************************************************}
